package bestiariomonsterhunter;

import bestiariomonsterhunter.Monstruos.Acuatico;
import bestiariomonsterhunter.Monstruos.DragonAnciano;
import bestiariomonsterhunter.Monstruos.InformaciónMonstruoGUI;
import bestiariomonsterhunter.Monstruos.ListaMonstruos;
import bestiariomonsterhunter.Monstruos.Monstruo;
import bestiariomonsterhunter.Monstruos.Terrestre;
import bestiariomonsterhunter.Monstruos.Volador;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;

/**
 *
 * @author Víctor Arroyo
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    private DefaultTableModel tableModel;
    private boolean viewTabla = false;
    private String tipoMonstruo = "";
    private ListaMonstruos listaMonstruos;
    private static boolean listaFiltrada;

    public enum Elemento {
        FUEGO, HIELO, AGUA, RAYO, DRACO, NINGUNO, SINFILTRO;
    }

    Elemento elementoFiltro;

    public boolean isListaFiltrada() {
        return this.listaFiltrada;
    }

    public String getTipoMonstruo() {
        return tipoMonstruo;
    }

    public VentanaPrincipal() {
        initComponents();
        tableModel = new DefaultTableModel(new String[]{"Imagen", "Nombre", "Tipo", "Elemento", "ObjetoMonstruo"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) { //para que el usu no pueda editar las celdas
                return false;
            }
        };
        tableMonstruos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila = tableMonstruos.getSelectedRow();
                if (fila >= 0) {
                    Monstruo m = (Monstruo) tableModel.getValueAt(fila, 4);
                    InformaciónMonstruoGUI ventanaInfo = new InformaciónMonstruoGUI();
                    ventanaInfo.setDatosMonstruo(m);
                    ventanaInfo.setVisible(true);
                    ventanaInfo.setLocationRelativeTo(null);
                    VentanaPrincipal.this.dispose();
                }
            }
        });
        tableMonstruos.setModel(tableModel);
        tableMonstruos.getColumn("Imagen").setCellRenderer(new MyTableCellRenderer());//-------RENDERIZADO----------
        tableMonstruos.removeColumn(tableMonstruos.getColumnModel().getColumn(4));
        listaMonstruos = new ListaMonstruos();

        labelTipo.setVisible(false);
        btnLimpiarFiltroElemDeb.setVisible(false);
        btnTipoDragon.setVisible(false);
        btnTipoNinguno.setVisible(false);
        btnTipoElectrico.setVisible(false);
        btnTipoFuego.setVisible(false);
        btnTipoHielo.setVisible(false);
        btnTipoAgua.setVisible(false);
        tableMonstruos.getTableHeader().setVisible(false);
        tableMonstruos.getTableHeader().setPreferredSize(new Dimension(0, 0));
        tableMonstruos.setBackground(Color.GRAY);
        panelFondo.setBackground(Color.DARK_GRAY);
        btnVolver.setVisible(false);
        scrollTableMonstruos.setVisible(false);
        actualizarTablaFiltradaElemDeb();
    }

    class MyTableCellRenderer implements TableCellRenderer {//-------RENDERIZADO----------

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            return (Component) value;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelFondo = new javax.swing.JPanel();
        btnLimpiarFiltroElemDeb = new javax.swing.JButton();
        btnTipoNinguno = new javax.swing.JButton();
        btnTipoAgua = new javax.swing.JButton();
        btnTipoHielo = new javax.swing.JButton();
        btnTipoFuego = new javax.swing.JButton();
        btnTipoElectrico = new javax.swing.JButton();
        btnTipoDragon = new javax.swing.JButton();
        labelTipo = new javax.swing.JLabel();
        btnVolver = new javax.swing.JButton();
        labelBannerTop = new javax.swing.JLabel();
        btnAnciano = new javax.swing.JButton();
        btnAcuatico = new javax.swing.JButton();
        btnTerrestre = new javax.swing.JButton();
        btnVolador = new javax.swing.JButton();
        btnListaCompleta = new javax.swing.JButton();
        scrollTableMonstruos = new javax.swing.JScrollPane();
        tableMonstruos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bestiario Monster Hunter");
        setIconImages(null);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelFondo.setLayout(null);

        btnLimpiarFiltroElemDeb.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnLimpiarFiltroElemDeb.setText("Limpiar filtros");
        btnLimpiarFiltroElemDeb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarFiltroElemDebActionPerformed(evt);
            }
        });
        panelFondo.add(btnLimpiarFiltroElemDeb);
        btnLimpiarFiltroElemDeb.setBounds(280, 260, 130, 30);

        btnTipoNinguno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bestiariomonsterhunter/img/elementos/fisico.png"))); // NOI18N
        btnTipoNinguno.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnTipoNinguno.setContentAreaFilled(false);
        btnTipoNinguno.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTipoNinguno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTipoNingunoActionPerformed(evt);
            }
        });
        panelFondo.add(btnTipoNinguno);
        btnTipoNinguno.setBounds(220, 260, 30, 30);

        btnTipoAgua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bestiariomonsterhunter/img/elementos/agua.png"))); // NOI18N
        btnTipoAgua.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnTipoAgua.setContentAreaFilled(false);
        btnTipoAgua.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTipoAgua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTipoAguaActionPerformed(evt);
            }
        });
        panelFondo.add(btnTipoAgua);
        btnTipoAgua.setBounds(190, 260, 30, 30);

        btnTipoHielo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bestiariomonsterhunter/img/elementos/hielo.png"))); // NOI18N
        btnTipoHielo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnTipoHielo.setContentAreaFilled(false);
        btnTipoHielo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTipoHielo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTipoHieloActionPerformed(evt);
            }
        });
        panelFondo.add(btnTipoHielo);
        btnTipoHielo.setBounds(160, 260, 30, 30);

        btnTipoFuego.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bestiariomonsterhunter/img/elementos/fuego.png"))); // NOI18N
        btnTipoFuego.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnTipoFuego.setContentAreaFilled(false);
        btnTipoFuego.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTipoFuego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTipoFuegoActionPerformed(evt);
            }
        });
        panelFondo.add(btnTipoFuego);
        btnTipoFuego.setBounds(130, 260, 30, 30);

        btnTipoElectrico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bestiariomonsterhunter/img/elementos/electrico.png"))); // NOI18N
        btnTipoElectrico.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnTipoElectrico.setContentAreaFilled(false);
        btnTipoElectrico.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTipoElectrico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTipoElectricoActionPerformed(evt);
            }
        });
        panelFondo.add(btnTipoElectrico);
        btnTipoElectrico.setBounds(100, 260, 30, 30);

        btnTipoDragon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bestiariomonsterhunter/img/elementos/dragon.png"))); // NOI18N
        btnTipoDragon.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnTipoDragon.setContentAreaFilled(false);
        btnTipoDragon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTipoDragon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTipoDragonActionPerformed(evt);
            }
        });
        panelFondo.add(btnTipoDragon);
        btnTipoDragon.setBounds(70, 260, 30, 30);

        labelTipo.setBackground(new java.awt.Color(0, 0, 0));
        labelTipo.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        labelTipo.setForeground(new java.awt.Color(255, 255, 255));
        labelTipo.setText(" Tipo: ");
        labelTipo.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 204, 51)));
        labelTipo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        labelTipo.setOpaque(true);
        panelFondo.add(labelTipo);
        labelTipo.setBounds(20, 250, 240, 50);

        btnVolver.setBackground(new java.awt.Color(204, 204, 204));
        btnVolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bestiariomonsterhunter/img/botonAtras.png"))); // NOI18N
        btnVolver.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnVolver.setBorderPainted(false);
        btnVolver.setContentAreaFilled(false);
        btnVolver.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });
        panelFondo.add(btnVolver);
        btnVolver.setBounds(1040, 230, 160, 90);

        labelBannerTop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bestiariomonsterhunter/img/bannerTitulo.jpg"))); // NOI18N
        panelFondo.add(labelBannerTop);
        labelBannerTop.setBounds(10, 20, 1200, 186);

        btnAnciano.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bestiariomonsterhunter/img/tiposMonstruos/anciano.jpg"))); // NOI18N
        btnAnciano.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAnciano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAncianoActionPerformed(evt);
            }
        });
        panelFondo.add(btnAnciano);
        btnAnciano.setBounds(910, 310, 290, 710);

        btnAcuatico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bestiariomonsterhunter/img/tiposMonstruos/acuatico.jpg"))); // NOI18N
        btnAcuatico.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAcuatico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcuaticoActionPerformed(evt);
            }
        });
        panelFondo.add(btnAcuatico);
        btnAcuatico.setBounds(610, 310, 290, 710);

        btnTerrestre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bestiariomonsterhunter/img/tiposMonstruos/terrestre.jpg"))); // NOI18N
        btnTerrestre.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTerrestre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTerrestreActionPerformed(evt);
            }
        });
        panelFondo.add(btnTerrestre);
        btnTerrestre.setBounds(310, 310, 290, 710);

        btnVolador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bestiariomonsterhunter/img/tiposMonstruos/volador.jpg"))); // NOI18N
        btnVolador.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnVolador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoladorActionPerformed(evt);
            }
        });
        panelFondo.add(btnVolador);
        btnVolador.setBounds(10, 310, 290, 710);

        btnListaCompleta.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnListaCompleta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bestiariomonsterhunter/img/botonListaCompleta.png"))); // NOI18N
        btnListaCompleta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnListaCompleta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListaCompletaActionPerformed(evt);
            }
        });
        panelFondo.add(btnListaCompleta);
        btnListaCompleta.setBounds(510, 220, 200, 80);

        scrollTableMonstruos.setBackground(new java.awt.Color(51, 51, 51));

        tableMonstruos.setFont(new java.awt.Font("Ink Free", 1, 36)); // NOI18N
        tableMonstruos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Imagen", "Nombre", "Tipo", "Elemento", "Objeto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableMonstruos.setToolTipText("");
        tableMonstruos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tableMonstruos.setRowHeight(150);
        tableMonstruos.setShowHorizontalLines(true);
        tableMonstruos.getTableHeader().setReorderingAllowed(false);
        scrollTableMonstruos.setViewportView(tableMonstruos);

        panelFondo.add(scrollTableMonstruos);
        scrollTableMonstruos.setBounds(20, 340, 1190, 730);

        getContentPane().add(panelFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1220, 1120));

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVoladorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoladorActionPerformed
        switchView();
        tipoMonstruo = "volador";
        listaFiltrada = true;
        actualizarTablaFiltradaElemDeb();
    }//GEN-LAST:event_btnVoladorActionPerformed

    private void btnTerrestreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTerrestreActionPerformed
        switchView();
        tipoMonstruo = "terrestre";
        listaFiltrada = true;
        actualizarTablaFiltradaElemDeb();
    }//GEN-LAST:event_btnTerrestreActionPerformed

    private void btnAcuaticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcuaticoActionPerformed
        switchView();
        tipoMonstruo = "acuatico";
        listaFiltrada = true;
        actualizarTablaFiltradaElemDeb();
    }//GEN-LAST:event_btnAcuaticoActionPerformed

    private void btnAncianoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAncianoActionPerformed
        switchView();
        tipoMonstruo = "anciano";
        listaFiltrada = true;
        actualizarTablaFiltradaElemDeb();
    }//GEN-LAST:event_btnAncianoActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        switchView();
        elementoFiltro = elementoFiltro.SINFILTRO;
        actualizarTablaFiltradaElemDeb();
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnListaCompletaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListaCompletaActionPerformed
        tipoMonstruo = "todos";
        listaFiltrada = false;
        switchView();
        actualizarTablaFiltradaElemDeb();
    }//GEN-LAST:event_btnListaCompletaActionPerformed

    private void btnTipoDragonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTipoDragonActionPerformed
        elementoFiltro = Elemento.DRACO;
        actualizarTablaFiltradaElemDeb();
    }//GEN-LAST:event_btnTipoDragonActionPerformed

    private void btnTipoElectricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTipoElectricoActionPerformed
        elementoFiltro = elementoFiltro.RAYO;
        actualizarTablaFiltradaElemDeb();
    }//GEN-LAST:event_btnTipoElectricoActionPerformed

    private void btnTipoFuegoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTipoFuegoActionPerformed
        elementoFiltro = elementoFiltro.FUEGO;
        actualizarTablaFiltradaElemDeb();
    }//GEN-LAST:event_btnTipoFuegoActionPerformed

    private void btnTipoHieloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTipoHieloActionPerformed
        elementoFiltro = elementoFiltro.HIELO;
        actualizarTablaFiltradaElemDeb();
    }//GEN-LAST:event_btnTipoHieloActionPerformed

    private void btnTipoAguaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTipoAguaActionPerformed
        elementoFiltro = elementoFiltro.AGUA;
        actualizarTablaFiltradaElemDeb();
    }//GEN-LAST:event_btnTipoAguaActionPerformed

    private void btnTipoNingunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTipoNingunoActionPerformed
        elementoFiltro = elementoFiltro.NINGUNO;
        actualizarTablaFiltradaElemDeb();
    }//GEN-LAST:event_btnTipoNingunoActionPerformed

    private void btnLimpiarFiltroElemDebActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarFiltroElemDebActionPerformed
        elementoFiltro = elementoFiltro.SINFILTRO;
        actualizarTablaFiltradaElemDeb();
    }//GEN-LAST:event_btnLimpiarFiltroElemDebActionPerformed

    //Métodos
    public void switchView() {
        if (!viewTabla) {
            btnTipoDragon.setFocusPainted(false); //porque al abrir la ventana se veia un bordeado que confundia, parecia que estubiese seleccionado
            labelTipo.setVisible(true);
            btnLimpiarFiltroElemDeb.setVisible(true);
            btnTipoDragon.setVisible(true);
            btnTipoNinguno.setVisible(true);
            btnTipoElectrico.setVisible(true);
            btnTipoFuego.setVisible(true);
            btnTipoHielo.setVisible(true);
            btnTipoAgua.setVisible(true);
            btnListaCompleta.setVisible(false);
            btnVolador.setVisible(false);
            btnTerrestre.setVisible(false);
            btnAcuatico.setVisible(false);
            btnAnciano.setVisible(false);
            scrollTableMonstruos.setVisible(true);
            btnVolver.setVisible(true);
            viewTabla = !viewTabla;
        } else {
            labelTipo.setVisible(false);
            btnLimpiarFiltroElemDeb.setVisible(false);
            btnTipoDragon.setVisible(false);
            btnTipoNinguno.setVisible(false);
            btnTipoElectrico.setVisible(false);
            btnTipoFuego.setVisible(false);
            btnTipoHielo.setVisible(false);
            btnTipoAgua.setVisible(false);
            btnListaCompleta.setVisible(true);
            btnVolador.setVisible(true);
            btnTerrestre.setVisible(true);
            btnAcuatico.setVisible(true);
            btnAnciano.setVisible(true);
            scrollTableMonstruos.setVisible(false);
            btnVolver.setVisible(false);
            viewTabla = !viewTabla;
        }
    }

    private void actualizarTablaFiltradaElemDeb() {
        actualizarTablaFiltradaTipoMonstruo();
        gestorDeBordes();
        if (elementoFiltro == Elemento.SINFILTRO) {
            return;
        }
        if (null != elementoFiltro) {
            switch (elementoFiltro) {
                case DRACO:
                    for (int i = tableModel.getRowCount() - 1; i >= 0; i--) {
                        Monstruo m = (Monstruo) tableModel.getValueAt(i, 4);
                        if (!m.getElemento().name().equalsIgnoreCase("DRACO")) {
                            tableModel.removeRow(i);
                        }
                    }
                    break;
                case AGUA:
                    for (int i = tableModel.getRowCount() - 1; i >= 0; i--) {
                        Monstruo m = (Monstruo) tableModel.getValueAt(i, 4);
                        if (!m.getElemento().name().equalsIgnoreCase("AGUA")) {
                            tableModel.removeRow(i);
                        }
                    }
                    break;
                case RAYO:
                    for (int i = tableModel.getRowCount() - 1; i >= 0; i--) {
                        Monstruo m = (Monstruo) tableModel.getValueAt(i, 4);
                        if (!m.getElemento().name().equalsIgnoreCase("RAYO")) {
                            tableModel.removeRow(i);
                        }
                    }
                    break;
                case FUEGO:
                    for (int i = tableModel.getRowCount() - 1; i >= 0; i--) {
                        Monstruo m = (Monstruo) tableModel.getValueAt(i, 4);
                        if (!m.getElemento().name().equalsIgnoreCase("FUEGO")) {
                            tableModel.removeRow(i);
                        }
                    }
                    break;
                case HIELO:
                    for (int i = tableModel.getRowCount() - 1; i >= 0; i--) {
                        Monstruo m = (Monstruo) tableModel.getValueAt(i, 4);
                        if (!m.getElemento().name().equalsIgnoreCase("HIELO")) {
                            tableModel.removeRow(i);
                        }
                    }
                    break;
                case NINGUNO:
                    for (int i = tableModel.getRowCount() - 1; i >= 0; i--) {
                        Monstruo m = (Monstruo) tableModel.getValueAt(i, 4);
                        if (!m.getElemento().name().equalsIgnoreCase("NINGUNO")) {
                            tableModel.removeRow(i);
                        }
                    }
                    break;
                default:
                    break;
            }
        }

    }

    private void gestorDeBordes() {
        //Bordes de TIPO ELEMENTAL
        if (elementoFiltro == Elemento.DRACO) {
            btnTipoDragon.setBorder(BorderFactory.createLineBorder(new Color(164, 133, 201), 2));
            btnTipoAgua.setBorder(BorderFactory.createEmptyBorder());
            btnTipoElectrico.setBorder(BorderFactory.createEmptyBorder());
            btnTipoFuego.setBorder(BorderFactory.createEmptyBorder());
            btnTipoHielo.setBorder(BorderFactory.createEmptyBorder());
            btnTipoNinguno.setBorder(BorderFactory.createEmptyBorder());
        } else if (elementoFiltro == Elemento.AGUA) {
            btnTipoDragon.setBorder(BorderFactory.createEmptyBorder());
            btnTipoAgua.setBorder(BorderFactory.createLineBorder(new Color(164, 133, 201), 2));
            btnTipoElectrico.setBorder(BorderFactory.createEmptyBorder());
            btnTipoFuego.setBorder(BorderFactory.createEmptyBorder());
            btnTipoHielo.setBorder(BorderFactory.createEmptyBorder());
            btnTipoNinguno.setBorder(BorderFactory.createEmptyBorder());
        } else if (elementoFiltro == Elemento.RAYO) {
            btnTipoDragon.setBorder(BorderFactory.createEmptyBorder());
            btnTipoAgua.setBorder(BorderFactory.createEmptyBorder());
            btnTipoElectrico.setBorder(BorderFactory.createLineBorder(new Color(164, 133, 201), 2));
            btnTipoFuego.setBorder(BorderFactory.createEmptyBorder());
            btnTipoHielo.setBorder(BorderFactory.createEmptyBorder());
            btnTipoNinguno.setBorder(BorderFactory.createEmptyBorder());
        } else if (elementoFiltro == Elemento.FUEGO) {
            btnTipoDragon.setBorder(BorderFactory.createEmptyBorder());
            btnTipoAgua.setBorder(BorderFactory.createEmptyBorder());
            btnTipoElectrico.setBorder(BorderFactory.createEmptyBorder());
            btnTipoFuego.setBorder(BorderFactory.createLineBorder(new Color(164, 133, 201), 2));
            btnTipoHielo.setBorder(BorderFactory.createEmptyBorder());
            btnTipoNinguno.setBorder(BorderFactory.createEmptyBorder());
        } else if (elementoFiltro == Elemento.HIELO) {
            btnTipoDragon.setBorder(BorderFactory.createEmptyBorder());
            btnTipoAgua.setBorder(BorderFactory.createEmptyBorder());
            btnTipoElectrico.setBorder(BorderFactory.createEmptyBorder());
            btnTipoFuego.setBorder(BorderFactory.createEmptyBorder());
            btnTipoHielo.setBorder(BorderFactory.createLineBorder(new Color(164, 133, 201), 2));
            btnTipoNinguno.setBorder(BorderFactory.createEmptyBorder());
        } else if (elementoFiltro == Elemento.NINGUNO) {
            btnTipoDragon.setBorder(BorderFactory.createEmptyBorder());
            btnTipoAgua.setBorder(BorderFactory.createEmptyBorder());
            btnTipoElectrico.setBorder(BorderFactory.createEmptyBorder());
            btnTipoFuego.setBorder(BorderFactory.createEmptyBorder());
            btnTipoHielo.setBorder(BorderFactory.createEmptyBorder());
            btnTipoNinguno.setBorder(BorderFactory.createLineBorder(new Color(164, 133, 201), 2));
        } else {
            btnTipoDragon.setBorder(BorderFactory.createEmptyBorder());
            btnTipoAgua.setBorder(BorderFactory.createEmptyBorder());
            btnTipoElectrico.setBorder(BorderFactory.createEmptyBorder());
            btnTipoFuego.setBorder(BorderFactory.createEmptyBorder());
            btnTipoHielo.setBorder(BorderFactory.createEmptyBorder());
            btnTipoNinguno.setBorder(BorderFactory.createEmptyBorder());
        }
    }

    public void actualizarTablaFiltradaTipoMonstruo() {
        tableModel.setRowCount(0);
        switch (tipoMonstruo) {
            case "volador":
                for (Monstruo m : listaMonstruos.getListaMonstruos()) {
                    if (m instanceof Volador) {
                        agregarFilaMonstruo(m);
                    }
                }
                break;
            case "terrestre":
                for (Monstruo m : listaMonstruos.getListaMonstruos()) {
                    if (m instanceof Terrestre) {
                        agregarFilaMonstruo(m);
                    }
                }
                break;
            case "acuatico":
                for (Monstruo m : listaMonstruos.getListaMonstruos()) {
                    if (m instanceof Acuatico) {
                        agregarFilaMonstruo(m);
                    }
                }
                break;
            case "anciano":
                for (Monstruo m : listaMonstruos.getListaMonstruos()) {
                    if (m instanceof DragonAnciano) {
                        agregarFilaMonstruo(m);
                    }
                }
                break;
            case "todos": //lista sin filtrar
                tableModel.setRowCount(0);

                for (Monstruo m : listaMonstruos.getListaMonstruos()) {
                    agregarFilaMonstruo(m);
                }
                break;
        }
    }

    private String determinarTipo(Monstruo m) {
        if (m instanceof Terrestre) {
            return "Terrestre";
        } else if (m instanceof Volador) {
            return "Volador";
        } else if (m instanceof Acuatico) {
            return "Acuático";
        } else if (m instanceof DragonAnciano) {
            return "Anciano";
        }
        return "Desconocido";
    }

    private void agregarFilaMonstruo(Monstruo m) {
        String nombre = m.getNombre();
        String tipo = determinarTipo(m); //Aqui implementamos DETERMINAR TIPO
        String elemento = m.getElemento().name();

        JLabel labelImagen = new JLabel();
        ImageIcon imagenOriginal = m.getImagen();
        Image imagenEscalada = imagenOriginal.getImage().getScaledInstance(245, 145, Image.SCALE_DEFAULT);
        ImageIcon imageFinal = new ImageIcon(imagenEscalada);
        labelImagen.setIcon(imageFinal);

        labelImagen.setHorizontalAlignment(JLabel.CENTER);
        labelImagen.setVerticalAlignment(JLabel.CENTER);

        tableModel.addRow(new Object[]{labelImagen, nombre, tipo, elemento, m});
    }

    public void setTipoMonstruo(String tipoMonstruo) {
        this.tipoMonstruo = tipoMonstruo;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcuatico;
    private javax.swing.JButton btnAnciano;
    private javax.swing.JButton btnLimpiarFiltroElemDeb;
    private javax.swing.JButton btnListaCompleta;
    private javax.swing.JButton btnTerrestre;
    private javax.swing.JButton btnTipoAgua;
    private javax.swing.JButton btnTipoDragon;
    private javax.swing.JButton btnTipoElectrico;
    private javax.swing.JButton btnTipoFuego;
    private javax.swing.JButton btnTipoHielo;
    private javax.swing.JButton btnTipoNinguno;
    private javax.swing.JButton btnVolador;
    private javax.swing.JButton btnVolver;
    private javax.swing.JLabel labelBannerTop;
    private javax.swing.JLabel labelTipo;
    private javax.swing.JPanel panelFondo;
    private javax.swing.JScrollPane scrollTableMonstruos;
    private javax.swing.JTable tableMonstruos;
    // End of variables declaration//GEN-END:variables
}
